<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站:<a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41023111/">https://mdecd2025.github.io/hw-41023111/</a></p>
<p>學員作業倉儲:  <a href="https://github.com/mdecd2025/hw-41023111">https://github.com/mdecd2025/hw-41023111 </a>  </p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Tasks</h1>
<h2>Task1</h2>
<h3>w1</h3>
<p>1.更改個人網站和倉儲</p>
<p>2.分組組成ag7</p>
<p>3.創建並登入 onshape</p>
<h3>w2</h3>
<p>228放假</p>
<h3>w3</h3>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/113a3d7e19b36a7672a136f3731ef07b095adeef/list_2a.py">列出 2a 學員作業網站與倉儲連結</a></p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<h3>w4</h3>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><span>putty的使用方法、fossil的操作方式、利用ipv6開啟近端</span></p>
<p><span>1.修改IPV6的設定</span></p>
<p><span><img alt="" height="450" src="/images/w4-1.png" width="800"/></span></p>
<p><span>2. :a後面數值以座號順序輸入，IP位置要改成IPV6設定的IP</span></p>
<p><span><img alt="" height="768" src="/images/w4-2.png" width="800"/></span></p>
<p><span>3.url要改成git@後面加上在PUTTY中所設定的名稱</span></p>
<p><span><img alt="" height="771" src="/images/w4-3.png" width="800"/></span></p>
<h3>w5</h3>
<p><strong>什麼是 Webots？</strong></p>
<p class="break-words">Webots 是一款專業的開源移動機器人仿真軟件，由 Cyberbotics 公司開發。它提供了一個快速原型設計環境，讓使用者可以在虛擬的 3D 空間中創建具有物理特性的機器人及其環境。Webots 最初由瑞士洛桑聯邦理工學院（EPFL）開發，後於 2018 年 12 月起以 Apache 2.0 許可證開源，廣泛應用於教育、研究和工業領域。它的核心基於開源物理引擎 ODE（Open Dynamics Engine）和 OpenGL 技術，支持 Windows、Linux 和 macOS 操作系統，並兼容多種編程語言，包括 C、C++、Python、Java 和 MATLAB。</p>
<p class="break-words">簡單來說，Webots 是一個強大的工具，用於模擬機器人的行為、測試控制算法，並在虛擬環境中驗證設計，而無需直接使用實體機器人。</p>
<hr/>
<p><strong>我可以用 Webots 做什麼？</strong></p>
<p class="break-words">Webots 的功能非常豐富，以下是一些主要用途：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>機器人設計與建模</strong>：
<ul class="marker:text-secondary">
<li class="break-words">使用內建的 3D 編輯器創建機器人模型，或導入外部 CAD 文件（如 Blender 或 URDF 格式）。</li>
<li class="break-words">設定機器人的物理屬性，例如質量、摩擦力、關節等。</li>
</ul>
</li>
<li class="break-words"><strong>仿真與測試</strong>：
<ul class="marker:text-secondary">
<li class="break-words">模擬機器人在不同環境中的行為，如輪式機器人、腿式機器人或飛行機器人。</li>
<li class="break-words">測試各種傳感器（如距離傳感器、攝影機、陀螺儀）和執行器（如馬達、驅動輪）的運作。</li>
</ul>
</li>
<li class="break-words"><strong>控制算法開發</strong>：
<ul class="marker:text-secondary">
<li class="break-words">編寫控制器程式，讓機器人執行特定任務，例如避障、巡線或協作。</li>
<li class="break-words">支持多種編程語言，適合不同技術背景的使用者。</li>
</ul>
</li>
<li class="break-words"><strong>教育與研究</strong>：
<ul class="marker:text-secondary">
<li class="break-words">用於機器人學課程，教授運動學、動力學和人工智能等概念。</li>
<li class="break-words">研究多智能體系統（如群體智慧）或自適應行為（如神經網絡、遺傳算法）。</li>
</ul>
</li>
<li class="break-words"><strong>真實機器人接口</strong>：
<ul class="marker:text-secondary">
<li class="break-words">將模擬結果轉移到真實機器人（如 e-puck、Nao、DARwIn-OP），實現虛實結合。</li>
</ul>
</li>
<li class="break-words"><strong>比賽與原型開發</strong>：
<ul class="marker:text-secondary">
<li class="break-words">參與機器人競賽（如 Robotstadium）或快速開發機器人原型，應用於汽車、航空航天或消費品行業。</li>
</ul>
</li>
</ol>
<p class="break-words">總之，Webots 適合用來模擬、驗證和優化機器人系統，無論是單一機器人還是多機器人協作場景。</p>
<hr/>
<p><strong>使用 Webots 需要知道什麼？</strong><span></span></p>
<p class="break-words">要有效使用 Webots，您需要掌握以下知識和技能：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>基本電腦操作</strong>：
<ul class="marker:text-secondary">
<li class="break-words">熟悉 Windows、Linux 或 macOS 操作系統的基本使用。</li>
<li class="break-words">確保您的電腦符合最低硬體要求：雙核 CPU（建議四核）、2GB RAM（建議更多）、支援 OpenGL 3.3 的顯卡（推薦 NVIDIA 或 AMD）。</li>
</ul>
</li>
<li class="break-words"><strong>編程基礎</strong>：
<ul class="marker:text-secondary">
<li class="break-words">熟悉至少一種 Webots 支持的語言：C、C++、Python、Java 或 MATLAB。</li>
<li class="break-words">理解基本的程式設計概念，如變數、迴圈、條件語句等。</li>
</ul>
</li>
<li class="break-words"><strong>機器人學概念</strong>：
<ul class="marker:text-secondary">
<li class="break-words">了解機器人的基本組成，例如傳感器、執行器和控制器。</li>
<li class="break-words">對物理模擬（如質量、摩擦力、碰撞檢測）有初步認識。</li>
</ul>
</li>
<li class="break-words"><strong>Webots 介面與功能</strong>：
<ul class="marker:text-secondary">
<li class="break-words">學習 Webots 的圖形介面，包括場景樹（Scene Tree）、3D 視圖和文字編輯器。</li>
<li class="break-words">熟悉如何創建「世界」（World）、添加物件和機器人，以及編寫控制器。</li>
</ul>
</li>
<li class="break-words"><strong>官方資源</strong>：
<ul class="marker:text-secondary">
<li class="break-words">閱讀 Webots 的《用戶指南》（User Guide）和《參考手冊》（Reference Manual），這兩個文件提供了詳細的操作說明和 API 介紹。</li>
<li class="break-words">使用內建的教學範例（Tutorials）逐步學習。</li>
</ul>
</li>
</ol>
<p class="break-words">初學者可以從簡單的任務開始，例如讓一個輪式機器人移動，然後逐步進階到更複雜的應用。</p>
<hr/>
<p><strong>如何獲得 Webots 的用戶支持？</strong><span></span></p>
<p class="break-words">Webots 提供了多種用戶支持管道：</p>
<ol class="marker:text-secondary">
<li class="break-words"><strong>官方文件</strong>：
<ul class="marker:text-secondary">
<li class="break-words">《用戶指南》和《參考手冊》可在 Webots 官網（<a href="https://cyberbotics.xn--com),-pn2hzxxpp7kma359dskcfx3f6bfr7dx74f65kl00ie27a/" rel="noopener noreferrer" target="_blank">https://cyberbotics.com）或軟件內獲取，提供全面的操作和</a><span> </span>API 說明。</li>
</ul>
</li>
<li class="break-words"><strong>社區支持</strong>：
<ul class="marker:text-secondary">
<li class="break-words"><strong>GitHub 討論區</strong>：Webots 的開源代碼托管於 GitHub（<a href="https://github.com/cyberbotics/webots%EF%BC%89%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E5%9C%A8%E3%80%8CDiscussions%E3%80%8D%E5%8D%80%E5%9F%9F%E6%8F%90%E5%95%8F%E6%88%96%E6%90%9C%E7%B4%A2%E8%A7%A3%E7%AD%94%E3%80%82" rel="noopener noreferrer" target="_blank">https://github.com/cyberbotics/webots），您可以在「Discussions」區域提問或搜索解答。</a></li>
<li class="break-words"><strong>論壇與社群</strong>：加入 Webots 的 Discord 伺服器或相關機器人學社群，與其他使用者交流。</li>
</ul>
</li>
<li class="break-words"><strong>技術支持</strong>：
<ul class="marker:text-secondary">
<li class="break-words">如果您是付費用戶（Webots 有商業版本），可以通過 Cyberbotics 的官方郵箱（<a href="mailto:support@cyberbotics.com" rel="noopener noreferrer" target="_blank">support@cyberbotics.com</a>）獲得專業支持。</li>
<li class="break-words">開源版本主要依賴社區自助，但問題通常也能在 GitHub 上得到回應。</li>
</ul>
</li>
<li class="break-words"><strong>教學資源</strong>：
<ul class="marker:text-secondary">
<li class="break-words">Webots 內建「導覽之旅」（Guided Tour），展示範例世界和功能。</li>
<li class="break-words">B 站或 YouTube 上有許多中文和英文教學影片，例如「Webots 超詳細入門教程」。</li>
</ul>
</li>
</ol>
<p class="break-words">建議先查閱官方文件和範例，若無法解決問題，再向社區或官方求助。</p>
<hr/>
<p><strong>Webots 仿真中的「世界」（World）是什麼？</strong><span></span></p>
<p class="break-words">在 Webots 中，「世界」（World）是指機器人及其環境的 3D 虛擬描述。它是一個完整的仿真場景，包含以下元素：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>物件描述</strong>：每個物件的位置、方向、幾何形狀、外觀（如顏色、紋理）和物理屬性（如質量、摩擦係數）。</li>
<li class="break-words"><strong>層次結構</strong>：世界以樹狀結構組織（基於 VRML97 格式），物件可包含子物件，例如一個機器人可能包含輪子、傳感器和關節。</li>
<li class="break-words"><strong>文件格式</strong>：世界儲存在<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">.wbt</span><span> </span>文件中，通常位於 Webots 項目的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">worlds</span><span> </span>子目錄。</li>
</ul>
<p class="break-words">世界文件不包含機器人的控制器程式，只指定每個機器人使用的控制器名稱。它定義了仿真的環境和初始條件，例如地面、地形、光線和障礙物。</p>
<hr/>
<p><strong>Webots 中的「控制器」（Controller）是什麼？</strong><span></span></p>
<p class="break-words">「控制器」（Controller）是控制 Webots 中機器人行為的程式。它負責：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>讀取傳感器數據</strong>：如距離傳感器或攝影機的輸入。</li>
<li class="break-words"><strong>執行邏輯運算</strong>：根據數據計算機器人的動作。</li>
<li class="break-words"><strong>發送指令</strong>：控制執行器，例如讓馬達轉動或輪子移動。</li>
</ul>
<p class="break-words"><strong>特性</strong>：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>編程語言</strong>：可用 C、C++、Java、Python 或 MATLAB 編寫。</li>
<li class="break-words"><strong>獨立進程</strong>：每個控制器作為 Webots 的子進程運行，不與主程式共享記憶體，可在不同 CPU 核心上執行。</li>
<li class="break-words"><strong>儲存位置</strong>：控制器源文件和編譯後的文件位於項目的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">controllers</span><span> </span>子目錄。</li>
</ul>
<p class="break-words">例如，一個簡單的控制器可能讓機器人檢測障礙物並轉向避開。同一控制器程式可被多個機器人共用，但每個機器人會啟動獨立的進程。</p>
<hr/>
<p><strong>Webots 中的「監督控制器」（Supervisor Controller）是什麼？</strong><span></span></p>
<p class="break-words">「監督控制器」（Supervisor Controller）是一種特殊類型的控制器，具有更高的權限，用於管理和控制整個仿真環境。它的特點包括：</p>
<ul class="marker:text-secondary">
<li class="break-words"><strong>特權操作</strong>：普通控制器只能控制機器人本身，而監督控制器可以執行以下操作：
<ul class="marker:text-secondary">
<li class="break-words">移動機器人到指定位置。</li>
<li class="break-words">更改仿真環境（如添加或移除物件）。</li>
<li class="break-words">控制仿真流程（如暫停、重啟或錄製影片）。</li>
</ul>
</li>
<li class="break-words"><strong>啟用方式</strong>：在場景樹中，將機器人的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">supervisor</span><span> </span>欄位設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">TRUE</span>，該機器人即可使用監督控制器。</li>
<li class="break-words"><strong>編程語言</strong>：與普通控制器相同，支持 C、C++、Python 等。</li>
</ul>
<p class="break-words"><strong>應用場景</strong>：</p>
<ul class="marker:text-secondary">
<li class="break-words">在多機器人仿真中，監督控制器可用來協調各機器人的行為。</li>
<li class="break-words">用於測試或調試，例如隨機放置障礙物或記錄機器人軌跡。</li>
</ul>
<h3>w6</h3>
<h3>w7</h3>
<h3>w8</h3>
<h3>w9</h3>
<h2>Task2</h2>
<h2>Task3</h2>
<h2>Task4</h2>
<h2>Task5</h2>
<h2>Task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<p>操作影片標題：國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023111 <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Ssik2rY_krg?si=FS2uIYi2AxmWRzpR" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8gf5xhIQs7Q?si=gTaw8qwXio0yS9p5" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/HW1/41023111-HW1">41023111-HW1</a></p>
<p>心得：第一次接觸webots這個軟體，在操作HW1過程中導入程式中不太會，剛開始嘗試連桿並不會轉動，後來有尋問同學解決問題，還需要多加摸索與加強操作功能。</p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023111</p>
<p>操作影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3rP5IRn5tvU?si=XHrMF09lGIURXqw6" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/HW2/41023111-Hw2">41023111-Hw2</a></p>
<p>心得：了解到如何用solvespace繪製圖檔並透過轉檔的方式匯入webots，第一次使用此功能還不熟悉要先預設好連接點座標，會繼續練習。</p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41023111</p>
<p></p>
<p><a href="/get_page/HW3/41023111-投籃機.slvs">41023111-投籃機.slvs</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Pgp_LKxIjuw?si=n5H2RVR4u2_aq42z" title="YouTube video player" width="560"></iframe></p>
<p>心得：<span>目前只完成利用solvespace繪製投籃機之作動，之後會將其匯入webots嘗試模擬。</span></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p class="" data-end="158" data-start="47"><strong data-end="58" data-start="47">第一週到第三週</strong><br data-end="61" data-start="58"/> 這段時間主要著重在建立可攜式的開發環境，同時利用 Python 撰寫程式來協助課程的分組名單分類作業。透過這項實作，不僅加深了對程式語言基本操作的熟悉度，也提升了對資料整理與處理邏輯的理解能力。</p>
<p class="" data-end="288" data-start="160"><strong data-end="171" data-start="160">第四週到第五週</strong><br data-end="174" data-start="171"/> 接下來的學習重點放在設定個人專屬的 IPv6 網址，並透過撰寫 .bat 批次檔進行快速自動化設定，有效提升了操作效率。這段期間也初步接觸了 Webots 模擬平台，雖然還未進入實際操作階段，但已對其架構與應用概念有了初步認識。</p>
<p class="" data-end="424" data-start="290"><strong data-end="308" data-start="290">第六週到第九週</strong><br data-end="311" data-start="308"/> 近期課程重心已轉向 Webots 模擬平台的實作應用，專注於機構連桿設計與動作模擬的建立與測試。在此同時，也輔助學習了 SolveSpace 和 Blender 這兩款建模與設計工具，進一步強化了模擬精準度與結構表現的完整性。</p>
<p>期中心得:</p>
<p class="" data-end="176" data-start="43">經過這九週的課程，我對系統環境的建置流程與模擬操作有了更完整且清晰的理解。從初期使用 Python 撰寫程式來進行分組名單的分類，到中期學習設定 IPv6 網址，逐步建立起我對程式與網路整合應用的基本觀念，同時也透過批次檔的使用，大幅提升了操作上的效率與自動化程度。</p>
<p class="" data-end="355" data-start="178">到了後期，課程轉向 Webots 模擬平台的實務應用，更加深了我對機器人模擬環境在開發流程中所扮演角色的認識。這不僅是單純的模擬操作，更需要結合幾何建模工具像是 SolveSpace 與 Blender，將機構設計與模擬內容有效結合，使整體模擬更貼近實體機構的樣貌。雖然一開始使用這些工具時略顯生疏，但隨著操作次數的增加，我逐漸掌握了相關邏輯與操作技巧。</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023111</p>
<p><img alt="" height="396" src="/images/exam1.png" width="800"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/r25cK-jnqFU?si=yb4pmfWi4wj86N0x" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/Exam1/41023111-Exam1">41023111-Exam1</a></p>
<p>心得：經過HW1的練習後了解到<span>利用Webots中的 box建立連桿機構，但在EXAM1操作過程中有遇到錯誤的問題，導致連桿不會轉動，還不太熟悉需要多加練習。</span></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023111</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/1aQuCvMxRh8?si=DiaqTEhv7nfap-QD" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/Exam2/41023111-Exam2">41023111-Exam2</a></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 41023111</p>
<p></p>
<p>Exam 3-3</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tfFuH8rmtR4?si=2GDghWkUBFWMJuoW" title="YouTube video player" width="560"></iframe></p>
<p><a href="/get_page/Exam3/41023111-exam 3-3">41023111-exam 3-3</a></p>
<p><a href="/get_page/Exam3/41023111-exam 3-3">41023111-exam 3-3</a></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題</span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;">_______________________________________________</span></span><br/></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;">根據教授提供的專案進行說明</span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;">下圖為七段顯示器的python程式碼</span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;"><img alt="" height="357" src="/images/final.png" width="800"/></span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;"><img alt="" height="866" src="/images/final-七段顯示器.png" width="697"/></span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;">其中的a1、b1<span>、c1....；a2、b2、c2.....，分別為個、十、百位數的 DEF 名稱，共有 7 段所以英文字母到g。</span></span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;"><span>self.segment_patterns 定義了數字 <code data-end="385" data-start="380">0~9</code> 每個數字在七段顯示器中的開啟狀態（<code data-end="401" data-start="398">1</code> 表示亮，<code data-end="409" data-start="406">0</code> 表示不亮）。</span></span></span></span></p>
<p><span style="background-color: #ffff00;"><span style="background-color: #ffff00; color: #000000;"><span style="background-color: #ffffff;"><span>set_digit() 中，利用 setSFVec3f() 控制顯示器數值。</span></span></span></span></p>
<p data-end="1861" data-start="1851">這段程式碼的功能是：在 Webots 中建立一個三位數七段顯示器，接收 <code data-end="1912" data-start="1894">"score_receiver"</code> 傳來的字串資料，轉換成數值。把分數累加後，用顯示器更新畫面，且支援最多顯示到 999 分（3 位數）。</p>
<p data-end="1861" data-start="1851">七段顯示器：<a href="/get_page/Final/three_digit_counter.7z">three_digit_counter.7z</a></p>
<p data-end="1861" data-start="1851">__________________________________________________________________</p>
<p data-end="1861" data-start="1851"><span><img alt="" height="354" src="/images/final-籃球機.png" width="800"/></span></p>
<p data-end="1861" data-start="1851"><span>上圖為投籃機與籃框在地板上進行投籃。</span></p>
<p><span>youbot Robot</span><span> 表示為</span>投籃機機器人</p>
<p><span></span><span>supervisor</span><span> 表示</span>為控制球的機器人</p>
<p><span>stand</span><span> 表示</span>為籃框機器人</p>
<p>心得：參考教授的檔案後有了解到如何使用七段顯示器計分<span>、</span>操控籃球機投籃<span>、建立場地籃框等，還有使用webots streaming遠端連線遙控車子，但最後這個項目還是無法完成，還需要再充分與組員討論與解決其中的問題，這學期收益良多。</span></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>